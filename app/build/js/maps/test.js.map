{"version":3,"sources":["test.coffee"],"names":[],"mappings":"AAAA,IAAA,GAAA;;AAAA,GAAA,GAAM,OAAO,CAAC,MAAR,CAAe,SAAf,EAA0B,EAA1B,CAAN,CAAA;;AAEA;AAAA;;GAFA;;AAAA,GAKG,CAAC,SAAJ,CAAc,aAAd,EAA6B,SAAA,GAAA;AAC3B,SAAO;AAAA,IACL,QAAA,EAAU,GADL;AAAA,IAEL,OAAA,EAAS,SAFJ;AAAA,IAGL,IAAA,EAAM,SAAC,KAAD,EAAQ,OAAR,EAAiB,IAAjB,EAAuB,IAAvB,GAAA;AACJ,MAAA,IAAc,YAAd;AAAA,cAAA,CAAA;OAAA;aACA,IAAI,CAAC,QAAQ,CAAC,IAAd,CAAoB,SAAC,KAAD,GAAA;AAClB,YAAA,GAAA;AAAA,QAAA,GAAA,GAAM,MAAA,CAAO,KAAP,CAAN,CAAA;AACA,QAAA,IAAc,GAAA,KAAO,GAArB;AAAA,UAAA,GAAA,GAAM,IAAN,CAAA;SADA;AAEA,eAAO,GAAP,CAHkB;MAAA,CAApB,EAFI;IAAA,CAHD;GAAP,CAD2B;AAAA,CAA7B,CALA,CAAA;;AAAA,GAkBG,CAAC,QAAJ,CAAa,YAAb,EAA2B,GAA3B,CAlBA,CAAA;;AAAA,GAsBG,CAAC,SAAJ,CAAc,aAAd,EAA6B,SAAA,GAAA;AAC3B,SAAO;AAAA,IACL,QAAA,EAAU,GADL;AAAA,IAEL,OAAA,EAAS,SAFJ;AAAA,IAGL,IAAA,EAAM,SAAC,KAAD,EAAQ,OAAR,EAAiB,IAAjB,EAAuB,IAAvB,GAAA;AACJ,UAAA,WAAA;AAAA,MAAA,IAAc,YAAd;AAAA,cAAA,CAAA;OAAA;AAAA,MACA,IAAA,GAAO,IADP,CAAA;AAAA,MAGA,KAAA,GAAQ,SAAC,KAAD,GAAA;AACN,YAAA,IAAA;AAAA,QAAA,IAAc,aAAd;AAAA,gBAAA,CAAA;SAAA;AACA,QAAA,IAAU,QAAA,CAAS,KAAT,CAAA,GAAkB,GAA5B;AAAA,gBAAA,CAAA;SADA;AAEA,QAAA,IAAU,KAAK,CAAC,KAAN,CAAY,KAAZ,CAAV;AAAA,gBAAA,CAAA;SAFA;AAGA,QAAA,IAAU,KAAK,CAAC,KAAN,CAAY,UAAZ,CAAV;AAAA,gBAAA,CAAA;SAHA;AAIA,QAAA,IAAG,KAAK,CAAC,KAAN,CAAY,KAAZ,CAAH;AACE,UAAA,IAAA,GAAO,QAAA,CAAS,KAAT,CAAP,CADF;SAAA,MAAA;AAGE,UAAA,IAAA,GAAO,IAAP,CAHF;SAJA;AAAA,QASA,IAAA,GAAO,KAAK,CAAC,OAAN,CAAc,IAAd,EAAmB,GAAnB,CATP,CAAA;AAWA,QAAA,IAAG,IAAA,KAAQ,KAAX;AACE,UAAA,IAAI,CAAC,aAAL,CAAmB,IAAnB,CAAA,CAAA;AAAA,UACA,IAAI,CAAC,OAAL,CAAA,CADA,CADF;SAXA;AAeA,QAAA,IAAG,YAAH;AACE,UAAA,KAAA,GAAQ,IAAR,CADF;SAAA,MAAA;AAGE,UAAA,KAAA,GAAQ,IAAR,CAHF;SAfA;eAoBA,MArBM;MAAA,CAHR,CAAA;aA0BA,IAAI,CAAC,QAAQ,CAAC,IAAd,CAAmB,KAAnB,EA3BI;IAAA,CAHD;GAAP,CAD2B;AAAA,CAA7B,CAtBA,CAAA;;AAAA,GAwDG,CAAC,OAAJ,CAAY,MAAZ,EAAoB,SAAA,GAAA;AAClB,EAAA,IAAC,CAAA,QAAD,GACE;AAAA,IAAA,KAAA,EAAO;MACL;AAAA,QAAA,IAAA,EAAM,OAAN;AAAA,QACA,OAAA,EAAS,CADT;OADK,EAIL;AAAA,QAAA,IAAA,EAAM,OAAN;AAAA,QACA,OAAA,EAAS,CADT;OAJK,EAOL;AAAA,QAAA,IAAA,EAAM,OAAN;AAAA,QACA,OAAA,EAAS,CADT;OAPK;KAAP;GADF,CAAA;AAAA,EAWA,IAAC,CAAA,QAAD,GACE;AAAA,IAAA,KAAA,EAAO;MACL;AAAA,QAAA,IAAA,EAAM,OAAN;AAAA,QACA,OAAA,EAAS,EADT;OADK,EAIL;AAAA,QAAA,IAAA,EAAM,OAAN;AAAA,QACA,OAAA,EAAS,EADT;OAJK,EAOL;AAAA,QAAA,IAAA,EAAM,OAAN;AAAA,QACA,OAAA,EAAS,EADT;OAPK;KAAP;GAZF,CAAA;AAAA,EAsBA,IAAC,CAAA,OAAD,GACE;AAAA,IAAA,KAAA,EAAO;MACL;AAAA,QAAA,IAAA,EAAM,OAAN;AAAA,QACA,OAAA,EAAS,EADT;OADK,EAIL;AAAA,QAAA,IAAA,EAAM,OAAN;AAAA,QACA,OAAA,EAAS,EADT;OAJK,EAOL;AAAA,QAAA,IAAA,EAAM,OAAN;AAAA,QACA,OAAA,EAAS,EADT;OAPK;KAAP;GAvBF,CAAA;AAAA,EAiCA,IAAC,CAAA,SAAD,GACE;AAAA,IAAA,KAAA,EAAO;MACL;AAAA,QAAA,IAAA,EAAM,OAAN;AAAA,QACA,OAAA,EAAS,EADT;OADK,EAIL;AAAA,QAAA,IAAA,EAAM,OAAN;AAAA,QACA,OAAA,EAAS,EADT;OAJK,EAOL;AAAA,QAAA,IAAA,EAAM,OAAN;AAAA,QACA,OAAA,EAAS,EADT;OAPK;KAAP;GAlCF,CAAA;SA4CA,KA7CkB;AAAA,CAApB,CAxDA,CAAA;;AAAA,GAuGG,CAAC,SAAJ,CAAc,UAAd,EAA0B,SAAA,GAAA;AACxB,SAAO;AAAA,IACL,QAAA,EAAU,GADL;AAAA,IAEL,WAAA,EAAa,eAFR;AAAA,IAGL,UAAA,EAAY,IAHP;AAAA,IAIL,KAAA,EAAO;AAAA,MAAE,KAAA,EAAO,GAAT;KAJF;AAAA,IAKL,UAAA,EAAY,SAAC,MAAD,EAAS,UAAT,GAAA;AACV,MAAA,MAAM,CAAC,cAAP,GAAwB,IAAxB,CAAA;AAAA,MAEA,MAAM,CAAC,OAAP,GAAiB,SAAA,GAAA;AACf,YAAA,GAAA;AAAA,QAAA,GAAA,GAAM,CAAC,CAAC,MAAF,CACJ,MAAM,CAAC,KADH,EAGJ,SAAC,IAAD,EAAO,IAAP,GAAA;iBACE,IAAA,GAAK,IAAI,CAAC,QADZ;QAAA,CAHI,EAMJ,CANI,CAAN,CAAA;eAQA,IATe;MAAA,CAFjB,CAAA;AAAA,MAaA,MAAM,CAAC,QAAP,GAAkB,SAAA,GAAA;AAChB,YAAA,SAAA;AAAA,QAAA,GAAA,GAAS,MAAM,CAAC,OAAV,CAAA,CAAN,CAAA;AAAA,QACA,IAAA,GAAO,UAAA,CAAW,UAAA,GAAa,GAAxB,CADP,CAAA;eAEA,KAHgB;MAAA,CAblB,CAAA;AAAA,MAkBA,MAAM,CAAC,aAAP,GAAuB,SAAC,QAAD,EAAW,KAAX,GAAA;AACrB,YAAA,KAAA;AAAA,QAAA,IAAA,CAAA,QAAgB,CAAA,KAAA,CAAhB;AACE,UAAA,KAAA,GAAQ,CAAC,CAAC,KAAF,CAAQ,QAAR,CAAR,CAAA;iBACA,KAAK,CAAC,MAAN,CAAa,KAAb,EAAoB,CAApB,EAFF;SADqB;MAAA,CAlBvB,CAAA;AAAA,MAuBA,MAAM,CAAC,YAAP,GAAsB,SAAC,IAAD,GAAA;AACpB,YAAA,eAAA;AAAA,QAAA,KAAA,GAAQ,MAAM,CAAC,aAAP,CAAqB,MAAM,CAAC,KAA5B,EAAmC,MAAM,CAAC,cAA1C,CAAR,CAAA;AAEA,QAAA,IAAG,IAAA,KAAQ,KAAX;AACE,UAAA,QAAA,GAAW,CAAC,CAAC,GAAF,CACT,KADS,EAGT,SAAC,IAAD,GAAA;mBACE,IAAI,CAAC,QADP;UAAA,CAHS,CAAX,CADF;SAAA,MAOK,IAAG,IAAA,KAAQ,KAAX;AACH,UAAA,QAAA,GAAW,CAAC,CAAC,GAAF,CACT,KADS,EAGT,SAAC,IAAD,GAAA;mBACE,IAAI,CAAC,QADP;UAAA,CAHS,CAAX,CADG;SATL;eAgBA,SAjBoB;MAAA,CAvBtB,CAAA;AAAA,MA0CA,MAAM,CAAC,MAAP,GAAgB,SAAC,KAAD,GAAA;eACd,MAAM,CAAC,cAAP,GAAwB,MADV;MAAA,CA1ChB,CAAA;AAAA,MA6CA,MAAM,CAAC,eAAP,GAAyB,SAAC,IAAD,EAAO,QAAP,EAAiB,OAAjB,GAAA;AACvB,QAAA,IAAG,IAAI,CAAC,IAAL,KAAa,QAAQ,CAAC,IAAzB;AACE,UAAA,IAAI,CAAC,OAAL,IAAgB,OAAhB,CAAA;AAEA,UAAA,IAAG,IAAI,CAAC,OAAL,GAAe,GAAlB;AACE,YAAA,IAAI,CAAC,OAAL,GAAe,GAAf,CAAA;mBACG,MAAM,CAAC,OAAV,CAAA,EAFF;WAHF;SADuB;MAAA,CA7CzB,CAAA;AAAA,MAqDA,MAAM,CAAC,eAAP,GAAyB,SAAC,IAAD,EAAO,QAAP,EAAiB,OAAjB,GAAA;AACvB,QAAA,IAAG,IAAI,CAAC,IAAL,KAAa,QAAQ,CAAC,IAAzB;AACE,UAAA,IAAI,CAAC,OAAL,IAAgB,OAAhB,CAAA;AAEA,UAAA,IAAG,IAAI,CAAC,OAAL,GAAe,CAAlB;AACE,YAAA,IAAI,CAAC,OAAL,GAAe,CAAf,CAAA;mBACG,MAAM,CAAC,OAAV,CAAA,EAFF;WAHF;SADuB;MAAA,CArDzB,CAAA;AAAA,MA6DA,MAAM,CAAC,OAAP,GAAiB,SAAA,GAAA;AACf,YAAA,2DAAA;AAAA,QAAA,KAAA,GAAQ,CAAC,CAAC,KAAF,CAAQ,MAAM,CAAC,KAAf,CAAR,CAAA;AAAA,QACA,MAAA,GAAS,KAAK,CAAC,MADf,CAAA;AAAA,QAEA,OAAA,GAAa,MAAM,CAAC,QAAV,CAAA,CAFV,CAAA;AAIA,QAAA,IAAG,MAAA,GAAS,CAAZ;AACE,UAAA,IAAG,OAAA,GAAU,CAAb;AACE,YAAA,QAAA,GAAW,MAAM,CAAC,YAAP,CAAoB,KAApB,CAAX,CAAA;AACA,iBAAA,4CAAA;+BAAA;AAAA,cAAC,MAAM,CAAC,eAAP,CAAuB,IAAvB,EAA6B,QAA7B,EAAuC,OAAvC,CAAD,CAAA;AAAA,aAFF;WAAA;AAIA,UAAA,IAAG,OAAA,GAAU,CAAb;AACE,YAAA,QAAA,GAAW,MAAM,CAAC,YAAP,CAAoB,KAApB,CAAX,CAAA;AACA,iBAAA,8CAAA;+BAAA;AAAA,cAAC,MAAM,CAAC,eAAP,CAAuB,IAAvB,EAA6B,QAA7B,EAAuC,OAAvC,CAAD,CAAA;AAAA,aAFF;WALF;SAJA;eAaA,MAAM,CAAC,KAAP,GAAe,CAAC,CAAC,KAAF,CAAQ,KAAR,EAdA;MAAA,CA7DjB,CAAA;AAAA,MA6EA,MAAM,CAAC,GAAP,GAAa,SAAA,GAAA;eACX,OAAO,CAAC,GAAR,CAAY,KAAZ,EADW;MAAA,CA7Eb,CAAA;AAAA,MAgFA,MAAM,CAAC,GAAP,GAAa,SAAA,GAAA;eACX,OAAO,CAAC,GAAR,CAAY,KAAZ,EADW;MAAA,CAhFb,CAAA;aAmFA,MAAM,CAAC,MAAP,CACE,SAAA,GAAA;eACE,MAAM,CAAC,MADT;MAAA,CADF,EAIE,SAAA,GAAA;AACE,QAAA,OAAO,CAAC,GAAR,CAAY,MAAZ,CAAA,CAAA;eACG,MAAM,CAAC,OAAV,CAAA,EAFF;MAAA,CAJF,EAQE,IARF,EApFU;IAAA,CALP;GAAP,CADwB;AAAA,CAA1B,CAvGA,CAAA;;AAAA,GAsOG,CAAC,UAAJ,CAAe,UAAf,EAA2B,SAAC,MAAD,EAAS,OAAT,EAAkB,UAAlB,EAA8B,IAA9B,GAAA;AACzB,MAAA,4EAAA;AAAA,EAAA,MAAM,CAAC,KAAP,GAAe,EAAf,CAAA;AAAA,EACA,OAAO,CAAC,KAAR,GAAgB,MAAM,CAAC,KADvB,CAAA;AAAA,EAEA,MAAM,CAAC,MAAP,GAAgB,UAFhB,CAAA;AAAA,EAIA,UAAA,GAAa,SAAC,KAAD,GAAA;AACX,QAAA,GAAA;AAAA,IAAA,GAAA,GAAM,CAAC,CAAC,MAAF,CACJ,KADI,EAGJ,SAAC,IAAD,EAAO,IAAP,GAAA;aACG,IAAA,GAAK,IAAI,CAAC,QADb;IAAA,CAHI,EAMJ,CANI,CAAN,CAAA;WAQA,IATW;EAAA,CAJb,CAAA;AAAA,EAeA,OAAA,GAAU,SAAC,IAAD,GAAA;AACR,IAAA,IAAK,CAAA,SAAA,CAAL,GAAkB,KAAlB,CAAA;AAAA,IACA,IAAK,CAAA,YAAA,CAAL,GAAqB,SAAA,GAAA;aACnB,IAAC,CAAA,QADkB;IAAA,CADrB,CAAA;AAAA,IAGA,IAAK,CAAA,YAAA,CAAL,GAAqB,SAAC,MAAD,EAAS,IAAT,GAAA;AACnB,MAAA,IAAG,MAAA,KAAU,CAAV,IAAe,MAAA,KAAU,CAAA,CAAzB,IAA+B,IAAA,KAAQ,QAA1C;AACE,QAAA,IAAC,CAAA,OAAD,IAAY,UAAA,CAAW,MAAX,CAAZ,CADF;OAAA,MAAA;AAGE,QAAA,IAAC,CAAA,OAAD,GAAW,UAAA,CAAW,MAAX,CAAX,CAHF;OAAA;aAIA,IAAC,CAAA,QALkB;IAAA,CAHrB,CAAA;WASA,KAVQ;EAAA,CAfV,CAAA;AAAA,EA2BA,iBAAA,GAAoB,SAAC,OAAD,EAAU,GAAV,GAAA;AAClB,WAAO,IAAI,CAAC,KAAL,CAAW,OAAA,GAAQ,UAAR,GAAmB,GAA9B,CAAP,CADkB;EAAA,CA3BpB,CAAA;AAAA,EA8BA,aAAA,GAAgB,SAAC,IAAD,EAAO,GAAP,GAAA;WACd,CAAC,CAAC,IAAF,CACE,IADF,EAGE,SAAC,EAAD,GAAA;aACE,EAAE,CAAC,OAAH,GAAa,iBAAA,CAAkB,EAAE,CAAC,OAArB,EAA8B,GAA9B,EADf;IAAA,CAHF,EADc;EAAA,CA9BhB,CAAA;AAAA,EAsCA,QAAA,GAAW,SAAC,QAAD,GAAA;AACT,QAAA,2BAAA;;MADU,WAAW,IAAI,CAAC;KAC1B;AAAA;AAAA;SAAA,2CAAA;mBAAA;AAAA,oBAAA,MAAM,CAAC,KAAK,CAAC,IAAb,CAAkB,OAAA,CAAQ,CAAR,CAAlB,EAAA,CAAA;AAAA;oBADS;EAAA,CAtCX,CAAA;AAAA,EAyCA,WAAA,GAAc,SAAA,GAAA;AACZ,QAAA,GAAA;AAAA,IAAA,GAAA,GAAM,UAAA,CAAW,MAAM,CAAC,KAAlB,CAAN,CAAA;AACA,YAAA,KAAA;AAAA,WACO,GAAA,KAAO,CADd;eACuB,MAAM,CAAC,KAAM,CAAA,CAAA,CAAE,CAAC,OAAhB,GAA0B,IADjD;AAAA,aAEO,CAAA,CAAA,GAAI,GAAJ,IAAI,GAAJ,GAAU,GAAV,CAAA,IAAiB,GAAA,GAAM,IAF9B;eAEuC,aAAA,CAAc,MAAM,CAAC,KAArB,EAA4B,GAA5B,EAFvC;AAAA,KAFY;EAAA,CAzCd,CAAA;AAAA,EA+CA,QAAA,CAAS,IAAI,CAAC,QAAd,CA/CA,CAAA;AAAA,EAgDG,WAAH,CAAA,CAhDA,CADyB;AAAA,CAA3B,CAtOA,CAAA","file":"test.js","sourceRoot":"/source/","sourcesContent":["app = angular.module \"testApp\", []\n\n###\n# fix https://github.com/angular/angular.js/issues/9269\n###\napp.directive \"rangeParser\", () ->\n  return {\n    restrict: \"A\"\n    require: \"ngModel\"\n    link: (scope, element, attr, ctrl) ->\n      return unless ctrl?\n      ctrl.$parsers.push( (value) ->\n        val = Number(value)\n        val = null if val != val\n        return val\n      )\n  }\n\napp.constant \"defaultSum\", 100\n\n# TODO show float precision (use Math lib or something else)\n# TODO manage old values for save value if letter char input\napp.directive \"commaDetect\", () ->\n  return {\n    restrict: \"A\"\n    require: \"ngModel\"\n    link: (scope, element, attr, ctrl) ->\n      return unless ctrl?\n      oldV = null\n\n      check = (value) ->\n        return unless value?\n        return if parseInt(value) > 100\n        return if value.match(/^\\-/)\n        return if value.match(/[a-zA-Z]/)\n        if value.match(/\\.$/)\n          oldV = parseInt(value)\n        else\n          oldV = null\n\n        tVal = value.replace(/,/g,\".\")\n\n        if tVal != value\n          ctrl.$setViewValue tVal\n          ctrl.$render()\n\n        if oldV?\n          value = oldV\n        else\n          value = tVal\n\n        value\n\n      ctrl.$parsers.push check\n  }\n\napp.service \"Data\", ->\n  @dataNull =\n    items: [\n      name: \"item1\"\n      percent: 0\n    ,\n      name: \"item2\"\n      percent: 0\n    ,\n      name: \"item3\"\n      percent: 0\n    ]\n  @dataNorm =\n    items: [\n      name: \"item1\"\n      percent: 60\n    ,\n      name: \"item2\"\n      percent: 10\n    ,\n      name: \"item3\"\n      percent: 30\n    ]\n  @dataBig =\n    items: [\n      name: \"item1\"\n      percent: 70\n    ,\n      name: \"item2\"\n      percent: 30\n    ,\n      name: \"item3\"\n      percent: 80\n    ]\n  @dataSmall =\n    items: [\n      name: \"item1\"\n      percent: 10\n    ,\n      name: \"item2\"\n      percent: 20\n    ,\n      name: \"item3\"\n      percent: 30\n    ]\n  @\n\napp.directive \"balancer\", () ->\n  return {\n    restrict: \"A\"\n    templateUrl: \"template.html\",\n    transclude: true\n    scope: { items: \"=\" }\n    controller: ($scope, defaultSum)->\n      $scope.indexOfChanged = null\n\n      $scope.findSum = ->\n        sum = _.reduce(\n          $scope.items\n        ,\n          (memo, item)->\n            memo+item.percent\n        ,\n          0\n        )\n        sum\n\n      $scope.findDiff = ->\n        sum = do $scope.findSum\n        diff = parseFloat defaultSum - sum\n        diff\n\n      $scope.removeChanged = (scpItems, index) ->\n        unless scpItems[index]\n          items = _.clone scpItems\n          items.splice index, 1\n\n      $scope.findAcceptor = (type) ->\n        items = $scope.removeChanged $scope.items, $scope.indexOfChanged\n\n        if type == \"min\"\n          acceptor = _.min(\n            items\n          ,\n            (item) ->\n              item.percent\n          )\n        else if type == \"max\"\n          acceptor = _.max(\n            items\n          ,\n            (item) ->\n              item.percent\n          )\n        acceptor\n\n      $scope.change = (index) ->\n        $scope.indexOfChanged = index\n\n      $scope.increasePercent = (item, acceptro, diffVal) ->\n        if item.name == acceptor.name\n          item.percent += diffVal\n\n          if item.percent > 100\n            item.percent = 100\n            do $scope.balance\n\n      $scope.decreasePercent = (item, acceptor, diffVal) ->\n        if item.name == acceptor.name\n          item.percent -= diffVal\n\n          if item.percent < 0\n            item.percent = 0\n            do $scope.balance\n\n      $scope.balance = ->\n        items = _.clone $scope.items\n        length = items.length\n        diffVal = do $scope.findDiff\n\n        if length > 1\n          if diffVal > 0\n            acceptor = $scope.findAcceptor(\"max\")\n            ($scope.increasePercent item, acceptor, diffVal) for item in items\n\n          if diffVal < 0\n            acceptor = $scope.findAcceptor(\"min\")\n            ($scope.decreasePercent item, acceptor, diffVal) for item in items\n\n        $scope.items = _.clone items\n\n      $scope.dec = () ->\n        console.log \"dec\"\n\n      $scope.inc = () ->\n        console.log \"inc\"\n\n      $scope.$watch(\n        ->\n          $scope.items\n      ,\n        ->\n          console.log \"init\"\n          do $scope.balance\n      ,\n        true\n      )\n#\n#      $scope.dirtySum = sumCompute($scope.model)\n#\n#      $scope.set = (item, percent) ->\n#        before = item.percent\n#        console.log \"before \", before\n#        item.setPercent(percent)\n#        after = item.percent\n#        console.log \"after \", after\n#        if after > before\n#          $scope.balance percent, \"max\"\n#        else if after < before\n#          $scope.balance percent, \"min\"\n#        return\n#\n#\n#      $scope.dec = (item) ->\n#        unless item.percent == 0 or item == findAcceptor \"min\"\n#          $scope.set(item, -1)\n#\n#      $scope.inc = (item) ->\n#        unless item.percent == 100 or item == findAcceptor \"max\" # TODO change this range or use dirtysum\n#          $scope.set(item, 1)\n  }\n# MainCtrl\n# use common sum\n# use ng-change\napp.controller \"MainCtrl\", ($scope, $window, defaultSum, Data) ->\n  $scope.model = []\n  $window.model = $scope.model\n  $scope.defSum = defaultSum\n\n  sumCompute = (items) ->\n    sum = _.reduce(\n      items\n    ,\n      (memo, item)->\n         memo+item.percent\n    ,\n      0\n    )\n    sum\n\n  modItem = (item) ->\n    item[\"blocked\"] = false\n    item[\"getPercent\"] = ->\n      @percent\n    item[\"setPercent\"] = (points, type)->\n      if points == 1 or points == -1 or type == \"append\"\n        @percent += parseFloat(points)\n      else\n        @percent = parseFloat(points)\n      @percent\n    item\n\n  resolveProportion = (percent, sum) ->\n    return Math.round(percent*defaultSum/sum)\n\n  normalizeData = (data, sum) ->\n    _.each(\n      data\n    ,\n      (el) ->\n        el.percent = resolveProportion(el.percent, sum)\n    )\n\n  loadData = (dataType = Data.dataNull) ->\n    $scope.model.push(modItem i) for i in dataType.items\n\n  analiseData = ->\n    sum = sumCompute($scope.model)\n    switch\n      when sum == 0   then $scope.model[0].percent = 100\n      when 0 < sum < 100 or sum > 100 then normalizeData($scope.model, sum)\n\n  loadData Data.dataNorm\n  do analiseData\n\n  return\n"]}