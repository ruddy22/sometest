{"version":3,"sources":["directives.coffee"],"names":[],"mappings":"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","file":"directives.js","sourceRoot":"/source/","sourcesContent":["app.directive \"balancer\", () ->\n  return {\n  restrict: \"A\"\n  templateUrl: \"template.html\"\n  transclude: true\n  scope: { items: \"=\" }\n  controller: ($scope, defaultSum)->\n    $scope.indexOfChanged = null\n\n    $scope.setZero = ->\n      console.log \"init\"\n      item.percent = 0 for item in $scope.items when item.percent != 100\n\n    $scope.findSum = ->\n      sum = 0\n      (sum += item.percent) for item in $scope.items\n      sum\n\n    $scope.findDiff = ->\n      sum = do $scope.findSum\n      diff = parseFloat defaultSum - sum\n      diff\n\n    $scope.spliceItem = (items, spliceItem) ->\n      newArray = []\n      angular.forEach(\n        items\n      ,\n        (item) ->\n          if spliceItem.name != item.name && !item.blocked\n            newArray.push item\n      )\n      newArray\n\n    $scope.findMax = ->\n      items = $scope.spliceItem $scope.items, $scope.items[$scope.indexOfChanged]\n      max = items[0]\n      angular.forEach(\n        items\n      ,\n        (item)->\n          if item.percent > max.percent\n            max = item\n      )\n      max\n\n    $scope.findMin = ->\n      items = $scope.spliceItem $scope.items, $scope.items[$scope.indexOfChanged]\n      min = items[0]\n      angular.forEach(\n        items\n      ,\n        (item)->\n          if item.percent < min.percent\n            min = item\n      )\n      min\n\n    $scope.increasePercent = (item, min, diffVal) ->\n      if item.name == min.name\n        item.percent += diffVal\n\n        if item.percent > 100\n          item.percent = 100\n\n    $scope.decreasePercent = (item, max, diffVal) ->\n      if item.name == max.name\n        item.percent += diffVal\n\n        if $scope.items[$scope.indexOfChanged].percent == 100\n          do $scope.setZero\n\n        if item.percent < 0\n          item.percent = 0\n\n    $scope.balance = (index)->\n      $scope.indexOfChanged = index\n      items = _.clone $scope.items\n      notBlocked = $scope.spliceItem $scope.items, $scope.items[$scope.indexOfChanged]\n      length = items.length\n      diffVal = do $scope.findDiff\n      diffVal = parseFloat diffVal.toFixed(2)\n\n      if length > 1  and notBlocked.length >= 1\n        if diffVal > 0\n          min = do $scope.findMin\n          ($scope.increasePercent item, min, diffVal) for item in items\n\n        if diffVal < 0\n          max = do $scope.findMax\n          ($scope.decreasePercent item, max, diffVal) for item in items\n\n      return\n\n      $scope.items = _.clone items\n\n    $scope.findCurrentSum = (items) ->\n      sum = 0\n      (sum += item.percent) for item in items\n      sum\n\n    $scope.findMinVal = (item) ->\n      return if item != undefined && item.blocked\n      min = 0\n      notBlocked = []\n      items = _.clone $scope.items\n      angular.forEach(\n        items\n      ,\n        (item) ->\n          if !item.blocked\n            notBlocked.push item\n\n          if notBlocked.length == 1 && items.length > 1\n            return notBlocked[0].percent\n      )\n      min\n\n    $scope.findMaxVal = (item) ->\n      return if item != undefined && item.blocked\n      items = _.clone $scope.items\n      max = 100\n      angular.forEach(\n        items\n      ,\n        (item) ->\n          if item.blocked\n            max -= item.percent\n      )\n      max\n  }\n\n###\n# fix https://github.com/angular/angular.js/issues/9269\n###\napp.directive \"rangeParser\", () ->\n  return {\n  restrict: \"A\"\n  require: \"ngModel\"\n  link: (scope, element, attr, ctrl) ->\n    return unless ctrl?\n    ctrl.$parsers.push( (value) ->\n      val = Number(value)\n      val = null if val != val\n      return val\n    )\n  }\n\napp.directive \"integer\", ->\n  return {\n  restrict: \"A\"\n  require: \"?ngModel\"\n  link: (scope, element, attrs, ctrl) ->\n    return unless ctrl?\n    ctrl.$parsers.push (value)->\n      return 100 if value > 100\n      return 0 if value < 0\n      return Number(value) if 0 <= value <= 100\n    ctrl.$formatters.unshift (value)->\n      value = value.replace(/,/,\".\")\n      value = parseFloat(value).toFixed(2)\n      value\n    ctrl.$formatters.push (value) ->\n      value\n  }\n"]}