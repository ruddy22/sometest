{"version":3,"sources":["controllers.coffee"],"names":[],"mappings":"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","file":"controllers.js","sourceRoot":"/source/","sourcesContent":["app.controller \"MainCtrl\", ($scope, $window, defaultSum, Data) ->\n  $scope.model = []\n  $window.model = $scope.model\n  $scope.currentData = []\n  $scope.currentSum = null\n  $scope.defSum = defaultSum\n\n  sumCompute = (items) ->\n    sum = _.reduce(\n      items\n    ,\n      (memo, item)->\n        memo+item.percent\n    ,\n      0\n    )\n    sum\n\n  modItem = (item) ->\n    item[\"blocked\"] = false\n    item\n\n  resolveProportion = (percent, sum) ->\n    return Math.round(percent*defaultSum/sum)\n\n  normalizeData = (data, sum) ->\n    _.each(\n      data\n    ,\n      (el) ->\n        el.percent = resolveProportion(el.percent, sum)\n    )\n\n  loadData = (dataType = Data.dataNull) ->\n    $scope.currentData = angular.copy dataType.items\n    $scope.model = []\n    $scope.model.push(modItem i) for i in dataType.items\n\n  analiseData = ->\n    return if _.isEmpty $scope.model\n    length = $scope.model.length\n    sum = sumCompute($scope.model)\n    switch\n      when sum == 0 or length == 1    then $scope.model[0].percent = 100\n      when 0 < sum < 100 or sum > 100 then normalizeData($scope.model, sum)\n\n  $scope.init = (dataType)->\n    loadData dataType\n    do analiseData\n\n  $scope.setDataNull = ->\n    $scope.init Data.dataNull\n  $scope.setDataNorm = ->\n    $scope.init Data.dataNorm\n  $scope.setDataBig = ->\n    $scope.init Data.dataBig\n  $scope.setDataSmall = ->\n    $scope.init Data.dataSmall\n  $scope.setDataOnce = ->\n    $scope.init Data.dataOnce\n  $scope.setDataTwice = ->\n    $scope.init Data.dataTwice\n\n  $scope.$watch(\n    ->\n      $scope.model\n  ,\n    ->\n      $scope.currentSum = sumCompute($scope.model)\n  )\n  return\n\napp.controller \"BalancerCtrl\", ($scope, defaultSum) ->\n  $scope.indexOfChanged = null\n\n  $scope.setZero = ->\n    item.percent = 0 for item in $scope.items when item.percent != 100\n\n  $scope.findSum = ->\n    sum = 0\n    (sum += item.percent) for item in $scope.items\n    sum\n\n  $scope.findDiff = ->\n    sum = do $scope.findSum\n    diff = parseFloat defaultSum - sum\n    diff\n\n  $scope.spliceItem = (items, spliceItem) ->\n    newArray = []\n    angular.forEach(\n      items\n    ,\n      (item) ->\n        if spliceItem.name != item.name && !item.blocked\n          newArray.push item\n    )\n    newArray\n\n  $scope.findMax = ->\n    items = $scope.spliceItem $scope.items, $scope.items[$scope.indexOfChanged]\n    max = items[0]\n    angular.forEach(\n      items\n    ,\n      (item)->\n        if item.percent > max.percent\n          max = item\n    )\n    max\n\n  $scope.findMin = ->\n    items = $scope.spliceItem $scope.items, $scope.items[$scope.indexOfChanged]\n    min = items[0]\n    angular.forEach(\n      items\n    ,\n      (item)->\n        if item.percent < min.percent\n          min = item\n    )\n    min\n\n  $scope.increasePercent = (item, min, diffVal) ->\n    if item.name == min.name\n      item.percent += diffVal\n\n      if item.percent > 100\n        item.percent = 100\n\n  $scope.decreasePercent = (item, max, diffVal) ->\n    if item.name == max.name\n      item.percent += diffVal\n\n      if $scope.items[$scope.indexOfChanged].percent == 100\n        do $scope.setZero\n\n      if item.percent < 0\n        item.percent = 0\n\n  $scope.balance = (index)->\n    $scope.indexOfChanged = index\n    items = _.clone $scope.items\n    notBlocked = $scope.spliceItem $scope.items, $scope.items[$scope.indexOfChanged]\n    length = items.length\n    diffVal = do $scope.findDiff\n    diffVal = parseFloat diffVal.toFixed(2)\n\n    if length > 1  and notBlocked.length >= 1\n      if diffVal > 0\n        min = do $scope.findMin\n        ($scope.increasePercent item, min, diffVal) for item in items\n\n      if diffVal < 0\n        max = do $scope.findMax\n        ($scope.decreasePercent item, max, diffVal) for item in items\n\n    return\n\n    $scope.items = _.clone items\n\n  $scope.findCurrentSum = (items) ->\n    sum = 0\n    (sum += item.percent) for item in items\n    sum\n\n  $scope.findMinVal = (item) ->\n    return if item != undefined && item.blocked\n    min = 0\n    notBlocked = []\n    items = _.clone $scope.items\n    angular.forEach(\n      items\n    ,\n      (item) ->\n        if !item.blocked\n          notBlocked.push item\n\n        if notBlocked.length == 1 && items.length > 1\n          return notBlocked[0].percent\n    )\n    min\n\n  $scope.findMaxVal = (item) ->\n    return if item != undefined && item.blocked\n    items = _.clone $scope.items\n    max = 100\n    angular.forEach(\n      items\n    ,\n      (item) ->\n        if item.blocked\n          max -= item.percent\n    )\n    max\n  return\n"]}